@model IEnumerable<Placement>

@{
    ViewData["Title"] = "Timesheets";
    ViewData["CurrentPage"] = "Timesheets";
}

<style>
    /* Additional styling to ensure the layout matches the screenshot provided */
    .table th, .table td {
        vertical-align: middle;
    }

    .view-btn {
        padding: 0.375rem 0.75rem; /* Same padding as standard Bootstrap buttons */
    }

    /* Styles for the 'Delete' button and 'Select All' checkbox */
    .delete-button-container {
        text-align: right;
        padding-bottom: 1rem; /* Adds space below the 'Delete' button */
    }

    .select-all-container {
        display: flex;
        justify-content: flex-end; /* Aligns content to the right side of the cell */
        align-items: center; /* Centers items vertically */
    }

    .select-all-label {
        margin-right: 0.5rem; /* Adds space between the label and the checkbox */
        white-space: nowrap; /* Prevents wrapping to a new line */
    }

    /* Styles to align the button with the tab items */
    .nav-tabs .nav-item:last-child {
        margin-left: auto; /* Push the button to the right */
    }

    .select-all {
        text-align: right; /* Aligns the 'Select All' checkbox to the right */
        padding-right: 1rem; /* Adds some padding on the right */
    }
    /* Ensures the first column uses most of the table's width */
    .table .name-column {
        width: 70%;
    }
    /* Ensures the form column does not take up much space */
    .table .form-column {
        width: 15%;
    }
    /* Adjust checkbox and view columns width */
    .table .checkbox-column, .table .view-column {
        width: 7.5%;
    }

    .btn-primary {
        background-color: var(--kodiaks-blue);
        color: white;
        border: none;
        border-radius: 0.5rem;
        font-size: 1rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

        .btn-primary:hover {
            background-color: #5a9bd5; /* Darker shade of kodiaks-blue */
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table thead {
            background-color: var(--stone-pipe-grey);
            color: white;
        }

            .table thead th {
                padding: 0.75rem 1rem;
                text-align: left;
            }

        .table tbody td {
            padding: 0.75rem 1rem;
            border-bottom: 1px solid var(--stone-pipe-grey);
        }
</style>

<!-- Tab navigation with button -->
<ul class="nav nav-tabs mb-3" role="tablist">
    <li class="nav-item">
        <a href="/Timesheet/Index" class="nav-link active">Timesheets</a>
    </li>
    <li class="nav-item" role="presentation">
    </li>
</ul>

@if (Model.Count() <= 0)
{
    <h4>There are currently no students with submitted time entries attached to your practicum placement.</h4>
} else
{
    <table class="table table-striped table-hover step1">
        <thead>
            <tr>
                <th class="name-column">
                    <div class="d-flex">
                        <!-- Sortable link with text and icon -->
                        <a class="text-white" asp-action="Index"
                           asp-route-sortOrder="@ViewData["NameSortParm"]"
                           asp-route-nameFilter="@ViewData["CurrentNameFilter"]">
                            Student Name <i class="fa-solid fa-sort me-2"></i>
                        </a>
                        <!-- Filter dropdown -->
                        <div class="dropdown">
                            <a class="text-white" style="cursor: pointer;" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fa-solid fa-filter"></i>
                            </a>
                            <div class="dropdown-menu p-4" aria-labelledby="dropdownMenuButton">
                                <div class="mb-3">
                                    <form>
                                        <input type="text" class="form-control mb-2" name="nameFilter" placeholder="First Name">
                                        <button class="btn btn-primary mt-3" asp-action="Index">Apply</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </th>
                <th class="view-column">Action</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null)
            {
                foreach (var placement in Model)
                {
                    if (placement.Timesheet != null)
                    {
                        <tr class="step2">
                            <td>@placement.Student.FirstName @placement.Student.LastName</td>
                            <td class="step4">
                                <a class="btn btn-outline-primary" asp-controller="Timesheet" asp-action="ViewTimesheet" asp-route-id="@placement.Id">View</a>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr class="step2">
                            <td>@placement.Student.FirstName @placement.Student.LastName</td>
                            <td class="step3">N/A</td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>

    <!-- Pagination -->
    <nav aria-label="Page navigation example">
        <ul class="pagination justify-content-center">
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
            </li>
            <li class="page-item active"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item">
                <a class="page-link" href="#">Next</a>
            </li>
        </ul>
    </nav>
}


<!-- Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete the selected items?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

@if (User.IsInRole("admin"))
{
    <script>
        const tour = new Shepherd.Tour({
            useModalOverlay: true,
            defaultStepOptions: {
                classes: 'shadow-md bg-purple-dark',
                scrollTo: true
            },
            defaultStepOptions: {
                exitOnEsc: true
            }
        });

        @*Start of Dashboard Demo*@
            tour.addStep({
                id: 'example-step',
                text: 'Here is the list of all students.',
                attachTo: {
                    element: '.step1',
                    on: 'bottom'
                },
                classes: 'step1',
                buttons: [
                    {
                        text: 'Next',
                        action: tour.next
                    },
                    {
                        text: 'Exit Tour',
                        action: tour.cancel
                    }
                ]
            });

        tour.addStep({
            id: 'example-step',
            text: 'Each row shows whether or not the student is currently assigned to a position, with a filled timesheet.',
            attachTo: {
                element: '.step2',
                on: 'bottom'
            },
            classes: 'step2',
            buttons: [
                {
                    text: 'Next',
                    action: tour.next
                },
                {
                    text: 'Exit Tour',
                    action: tour.cancel
                }
            ]
        });

        tour.addStep({
            id: 'example-step',
            text: 'The students without a timesheet will have the action: N/A.',
            attachTo: {
                element: '.step3',
                on: 'bottom'
            },
            classes: 'step3',
            buttons: [
                {
                    text: 'Next',
                    action: tour.next
                },
                {
                    text: 'Exit Tour',
                    action: tour.cancel
                }
            ]
        });

        tour.addStep({
            id: 'example-step',
            text: 'The students with timesheets will have the action: View. Press this to see the students time entries.',
            attachTo: {
                element: '.step4',
                on: 'bottom'
            },
            classes: 'step4',
            buttons: [
                {
                    text: 'Finish',
                    action: tour.cancel
                }
            ]
        });
        @*End of Dashboard Demo*@
    </script>
}
else if (User.IsInRole("employer"))
{
        <script>
        const tour = new Shepherd.Tour({
            useModalOverlay: true,
            defaultStepOptions: {
                classes: 'shadow-md bg-purple-dark',
                scrollTo: true
            },
            defaultStepOptions: {
                exitOnEsc: true
            }
        });

        @*Start of Dashboard Demo*@
            tour.addStep({
                id: 'example-step',
                text: 'Here is the list of the students assigned to your company.',
                attachTo: {
                    element: '.step1',
                    on: 'bottom'
                },
                classes: 'step1',
                buttons: [
                    {
                        text: 'Next',
                        action: tour.next
                    },
                    {
                        text: 'Exit Tour',
                        action: tour.cancel
                    }
                ]
            });

        tour.addStep({
            id: 'example-step',
            text: 'The students without any time entries on their timesheet will have the action: N/A.',
            attachTo: {
                element: '.step3',
                on: 'bottom'
            },
            classes: 'step3',
            buttons: [
                {
                    text: 'Next',
                    action: tour.next
                },
                {
                    text: 'Exit Tour',
                    action: tour.cancel
                }
            ]
        });

        tour.addStep({
            id: 'example-step',
            text: 'The students with time entries on their timesheet will have the action: View. Press this to see the students time entries.',
            attachTo: {
                element: '.step4',
                on: 'bottom'
            },
            classes: 'step4',
            buttons: [
                {
                    text: 'Finish',
                    action: tour.cancel
                }
            ]
        });
        @*End of Dashboard Demo*@
    </script>
}

<script>
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('select-all').addEventListener('change', function (event) {
                const checkboxes = document.querySelectorAll('.table .form-check-input');
                const isChecked = event.target.checked;

                checkboxes.forEach(function (checkbox) {
                    // Skip the 'Select All' checkbox to avoid recursive checking
                    if (checkbox !== event.target) {
                        checkbox.checked = isChecked;
                    }
                });
            });
        });

    // Function to delete selected rows
    function deleteSelected() {
        const checkboxes = document.querySelectorAll('.table tbody .form-check-input');
        checkboxes.forEach(function (checkbox) {
            if (checkbox.checked) {
                // Assuming each checkbox is in a row that should be deleted
                checkbox.closest('tr').remove();
            }
        });
    }
</script>