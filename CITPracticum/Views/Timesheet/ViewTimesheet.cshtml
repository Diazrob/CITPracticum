@model Placement

@{
    ViewData["Title"] = "Time Entries";
    ViewData["CurrentPage"] = "Time Entries";
    DateTime now = DateTime.Now;
}

<style>
    /* Additional styling to ensure the layout matches the screenshot provided */
    .table th, .table td {
        vertical-align: middle;
    }

    .view-btn {
        padding: 0.375rem 0.75rem; /* Same padding as standard Bootstrap buttons */
    }

    /* Styles for the 'Delete' button and 'Select All' checkbox */
    .delete-button-container {
        text-align: right;
        padding-bottom: 1rem; /* Adds space below the 'Delete' button */
    }

    .select-all-container {
        display: flex;
        justify-content: flex-end; /* Aligns content to the right side of the cell */
        align-items: center; /* Centers items vertically */
    }

    .select-all-label {
        margin-right: 0.5rem; /* Adds space between the label and the checkbox */
        white-space: nowrap; /* Prevents wrapping to a new line */
    }

    /* Styles to align the button with the tab items */
    .nav-tabs .nav-item:last-child {
        margin-left: auto; /* Push the button to the right */
    }

    .select-all {
        text-align: right; /* Aligns the 'Select All' checkbox to the right */
        padding-right: 1rem; /* Adds some padding on the right */
    }
    /* Ensures the first column uses most of the table's width */
    .table .name-column {
        width: 10%;
    }


    /* Align the checkbox with the 'Select All' text */
    .select-all-label {
        line-height: 1.5; /* Adjust this value as needed to align with your text */
        display: inline-block; /* Ensures the label aligns properly with the checkbox */
        vertical-align: middle; /* Centers the label with the checkbox */
    }

    /* Adjust checkbox alignment */
    #select-all {
        vertical-align: middle;
        /* If further adjustment is needed, you can uncomment the following line and adjust the value */
        /* margin-top: -0.2rem; */
    }

</style>

<!-- Tab navigation with button -->
<form method="post" asp-controller="Timesheet" asp-action="ProcessEntries">
    <div class="d-flex">
        @if (User.IsInRole("admin") || User.IsInRole("employer"))
        {
            <a href="/Timesheet/Index" class="btn btn-secondary mb-3 h-25" style="margin-left: -115px; width: 80px;"><i class="fa-solid fa-chevron-left"></i> Back</a>
        }
        <ul class="nav nav-tabs mb-3 d-flex justify-content-end w-100" role="tablist">
            @if (User.IsInRole("admin") || User.IsInRole("employer"))
            {
                <li class="nav-item">
                    <a class="nav-link" href="/Timesheet/Index">Timesheets</a>
                </li>
            }
            <li class="nav-item">
                <a class="nav-link active">Time Entries</a>
            </li>
            <!-- This is where the 'Create Form' button is placed -->
            <li class="nav-item" role="presentation">
                @if (Model != null)
                {
                    if (User.IsInRole("admin") || User.IsInRole("student"))
                    {
                        <button class="btn btn-primary step7 studstep6" asp-controller="Timesheet" asp-action="CreateTimeEntry" asp-route-id="@Model.Id"><i class="fa-solid fa-plus me-1"></i>Add Time Entry</button>
                    }
                    <div class="btn-group step5" role="group" aria-label="Basic example">
                        @if (User.IsInRole("admin") || User.IsInRole("employer"))
                        {
                            <button type="button" class="btn btn-success" style="width: 120px;" data-bs-toggle="modal" data-bs-target="#approveModal"><i class="fa-regular fa-circle-check me-1"></i>Approve</button>
                            <button type="button" class="btn btn-danger" style="width: 120px;" data-bs-toggle="modal" data-bs-target="#denyModal"><i class="fa-regular fa-circle-xmark me-1"></i>Deny</button>
                        }
                    </div>
                    if (User.IsInRole("admin") || User.IsInRole("student"))
                    {
                        <button type="button" class="btn btn-danger ms-auto step6 studstep7" style="width: 100px;" data-bs-toggle="modal" data-bs-target="#deleteModal"><i class="fa-regular fa-trash-can me-1"></i>Delete</button>
                    }
                }
            </li>
        </ul>
    </div>

    @if (Model != null)
    {
        @if (User.IsInRole("student"))
        {
            // What the user sees for the title, currently nothing
        }
        else
        {
            <h4>@Model.Student.FirstName's Time Entries</h4>
        }
        if (Model.TimesheetId != null && Model.TimesheetId != 0)
        {
            <table class="table table-striped table-hover step1">
                <thead>
                    <tr>
                        <th class="name-column">Date Worked</th>
                        <th class="view-column"># of Hours</th>
                        <th class="view-column">Description</th>
                        <th class="view-column">Total Approved Hours to Date</th>
                        <th class="view-column">Status</th>
                        @if (User.IsInRole("student") || User.IsInRole("admin"))
                        {
                            <th>Action</th>
                        }
                        <th class="checkbox-column">
                            <div class="select-all-container step8">
                                <label for="select-all" class="select-all-label">Select All</label>
                                <input type="checkbox" id="select-all" class="form-check-input">
                            </div>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Timesheet != null && Model.Timesheet.TimeEntries != null)
                    {
                        @foreach (var entry in Model.Timesheet.TimeEntries)
                        {
                            <tr class="step2">
                                <td>@entry.ShiftDate.ToString("yyyy-MM-dd")</td>
                                <td>
                                    @entry.Hours.ToString("0.00")
                                </td>
                                <td>
                                    @entry.Description
                                </td>

                                @if (entry.ApprovalCategory == CITPracticum.Data.Enum.ApprovalCategory.Yes)
                                {
                                    <td>
                                        @entry.HoursToDate
                                    </td>
                                }
                                else
                                {
                                    <td>
                                        N/A
                                    </td>
                                }


                                @switch (entry.ApprovalCategory)
                                {
                                    case CITPracticum.Data.Enum.ApprovalCategory.No:
                                        <td class="step3">Denied</td>
                                        break;
                                    case CITPracticum.Data.Enum.ApprovalCategory.Yes:
                                        <td class="step3">Approved</td>
                                        break;
                                    case CITPracticum.Data.Enum.ApprovalCategory.InProgress:
                                        <td class="step3">In Progress</td>
                                        break;
                                }

                                @if (!User.IsInRole("employer"))
                                {
                                    @if (!User.IsInRole("student") || entry.ApprovalCategory == CITPracticum.Data.Enum.ApprovalCategory.InProgress)
                                    {
                                        <td class="adminstep3 studstep4">
                                            <button class="btn btn-outline-secondary" asp-controller="Timesheet" asp-action="EditTimeEntry" asp-route-entryId="@entry.Id">Edit</button>
                                        </td>
                                        <td class="text-end step4 studstep5"><input type="checkbox" name="timeEntryIds" value="@entry.Id" class="form-check-input"></td>
                                    }
                                    else
                                    {
                                        <td class="studstep4">N/A</td>
                                        <td class="text-end studstep5">N/A</td>
                                    }
                                }
                                else
                                {
                                    <td class="text-end step4 studstep5"><input type="checkbox" name="timeEntryIds" value="@entry.Id" class="form-check-input"></td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No time sheet associated with this account. Click 'Add Time Entry' to get your Timesheet started!</p>
        }
    }
    else
    {
        <div>No placement found</div>
    }

    <!-- Modal -->
    <div class="modal fade" id="approveModal" tabindex="-1" aria-labelledby="approveModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="approveModalLabel">Approve</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to approve the selected item(s)?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <input type="hidden" id="actionTypeInput" name="actionType" value="default" />
                    <input type="submit" class="btn btn-success" value="Approve" onclick="setActionType('approve')" />
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="denyModal" tabindex="-1" aria-labelledby="denyModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="denyModalLabel">Deny</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to deny the selected item(s)?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <input type="hidden" name="id" value="@Model.Id" />
                    <input type="submit" class="btn btn-danger" value="Deny" onclick="setActionType('deny')" />
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete the selected item(s)?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <input type="submit" class="btn btn-danger" value="Delete" onclick="setActionType('delete')" />
                </div>
            </div>
        </div>
    </div>
</form>

@if (User.IsInRole("admin"))
{
    <script>
        const tour = new Shepherd.Tour({
            useModalOverlay: true,
            defaultStepOptions: {
                classes: 'shadow-md bg-purple-dark',
                scrollTo: true
            },
            defaultStepOptions: {
                exitOnEsc: true
            }
        });

        @*Start of Dashboard Demo*@
            tour.addStep({
                id: 'example-step',
                text: 'Here is the list of all of the selected students time entries.',
                attachTo: {
                    element: '.step1',
                    on: 'bottom'
                },
                classes: 'step1',
                buttons: [
                    {
                        text: 'Next',
                        action: tour.next
                    },
                    {
                        text: 'Exit Tour',
                        action: tour.cancel
                    }
                ]
            });

        tour.addStep({
            id: 'example-step',
            text: 'Each row shows information from the given shift.',
            attachTo: {
                element: '.step2',
                on: 'bottom'
            },
            classes: 'step2',
            buttons: [
                {
                    text: 'Next',
                    action: tour.next
                },
                {
                    text: 'Exit Tour',
                    action: tour.cancel
                }
            ]
        });

        tour.addStep({
            id: 'example-step',
            text: 'You are able to edit any of the entries directly by clicking this button.',
            attachTo: {
                element: '.adminstep3',
                on: 'bottom'
            },
            classes: 'adminstep3',
            buttons: [
                {
                    text: 'Next',
                    action: tour.next
                },
                {
                    text: 'Exit Tour',
                    action: tour.cancel
                }
            ]
        });

        tour.addStep({
            id: 'example-step',
            text: 'You are also able to multi-select any of the entries to use the following actions: Approve, Deny, and Delete.',
            attachTo: {
                element: '.step4',
                on: 'bottom'
            },
            classes: 'step4',
            buttons: [
                {
                    text: 'Next',
                    action: tour.next
                },
                {
                    text: 'Exit Tour',
                    action: tour.cancel
                }
            ]
        });

        tour.addStep({
            id: 'example-step',
            text: 'Here is the select all button. It may be used for any of the entries to use the following actions: Approve, Deny, and Delete.',
            attachTo: {
                element: '.step8',
                on: 'bottom'
            },
            classes: 'step8',
            buttons: [
                {
                    text: 'Next',
                    action: tour.next
                },
                {
                    text: 'Exit Tour',
                    action: tour.cancel
                }
            ]
        });

        tour.addStep({
            id: 'example-step',
            text: 'These are the approve and deny buttons. You can select 1 or more entries and a pop-up will confirm whether or not you want to go through with the action.',
            attachTo: {
                element: '.step5',
                on: 'bottom'
            },
            classes: 'step5',
            buttons: [
                {
                    text: 'Next',
                    action: tour.next
                },
                {
                    text: 'Exit Tour',
                    action: tour.cancel
                }
            ]
        });

        tour.addStep({
            id: 'example-step',
            text: 'This is the delete button. You can select 1 or more entries and a pop-up will confirm whether or not you want to go through with the action.',
            attachTo: {
                element: '.step6',
                on: 'bottom'
            },
            classes: 'step6',
            buttons: [
                {
                    text: 'Next',
                    action: tour.next
                },
                {
                    text: 'Exit Tour',
                    action: tour.cancel
                }
            ]
        });

        tour.addStep({
            id: 'example-step',
            text: 'This is the add entry button. It will add an entry to the selected students timesheet. It will auto approve, however you can edit in the edit option if you would like to change it to in progress or denied.',
            attachTo: {
                element: '.step7',
                on: 'bottom'
            },
            classes: 'step7',
            buttons: [
                {
                    text: 'Finish',
                    action: tour.cancel
                }
            ]
        });
        @*End of Dashboard Demo*@
    </script>
}
else if (User.IsInRole("student") && Model.TimesheetId != null)
{
    <script>
                        const tour = new Shepherd.Tour({
            useModalOverlay: true,
            defaultStepOptions: {
                classes: 'shadow-md bg-purple-dark',
                scrollTo: true
            },
            defaultStepOptions: {
                exitOnEsc: true
            }
        });

        @*Start of Dashboard Demo*@
            tour.addStep({
                id: 'example-step',
                text: 'Here is the list of all of your time entries.',
                attachTo: {
                    element: '.step1',
                    on: 'bottom'
                },
                classes: 'step1',
                buttons: [
                    {
                        text: 'Next',
                        action: tour.next
                    },
                    {
                        text: 'Exit Tour',
                        action: tour.cancel
                    }
                ]
            });

        tour.addStep({
            id: 'example-step',
            text: 'Each row shows your: date worked, number of hours, description, total hours to date, and the approval status, actions, and a select button.',
            attachTo: {
                element: '.step2',
                on: 'bottom'
            },
            classes: 'step2',
            buttons: [
                {
                    text: 'Next',
                    action: tour.next
                },
                {
                    text: 'Exit Tour',
                    action: tour.cancel
                }
            ]
        });

        tour.addStep({
            id: 'example-step',
            text: 'The status shows you one of three options: In Progress, Approved, or Denied. In Progess means that an administrator or employer still has to approve or deny the entry.',
            attachTo: {
                element: '.step3',
                on: 'bottom'
            },
            classes: 'step3',
            buttons: [
                {
                    text: 'Next',
                    action: tour.next
                },
                {
                    text: 'Exit Tour',
                    action: tour.cancel
                }
            ]
        });

        tour.addStep({
            id: 'example-step',
            text: 'This is the action area. It will show Edit if the entry is in progress, or N/A if the entry has been approved or denied. You are able to edit them until they are approved or denied',
            attachTo: {
                element: '.studstep4',
                on: 'bottom'
            },
            classes: 'studstep4',
            buttons: [
                {
                    text: 'Next',
                    action: tour.next
                },
                {
                    text: 'Exit Tour',
                    action: tour.cancel
                }
            ]
        });

        tour.addStep({
            id: 'example-step',
            text: 'This is the select area. If the entry or entries you have selected are in progress, you are able to delete them.',
            attachTo: {
                element: '.studstep5',
                on: 'bottom'
            },
            classes: 'studstep5',
            buttons: [
                {
                    text: 'Next',
                    action: tour.next
                },
                {
                    text: 'Exit Tour',
                    action: tour.cancel
                }
            ]
        });

        tour.addStep({
            id: 'example-step',
            text: 'This is the add time entry button, this will direct you to a new page to add an entry to your timesheet.',
            attachTo: {
                element: '.studstep6',
                on: 'bottom'
            },
            classes: 'studstep6',
            buttons: [
                {
                    text: 'Next',
                    action: tour.next
                },
                {
                    text: 'Exit Tour',
                    action: tour.cancel
                }
            ]
        });

        tour.addStep({
            id: 'example-step',
            text: 'Finally, this is the delete button, select 1 or more entries to delete using the select checkboxes, and then a pop-up will ask for your confirmation.',
            attachTo: {
                element: '.studstep7',
                on: 'bottom'
            },
            classes: 'studstep7',
            buttons: [
                {
                    text: 'Finish',
                    action: tour.cancel
                }
            ]
        });

        @*End of Dashboard Demo*@
    </script>
}
else if (User.IsInRole("student") && Model.TimesheetId == null)
{

}

@if (User.IsInRole("admin"))
{
    <script>
            // This function updates the delete button's disabled state based on the checkboxes
            function updateDeleteButtonState() {
                // Find all checkboxes with name='timeEntryIds' except the 'select-all' checkbox
                const checkboxes = document.querySelectorAll('input[name="timeEntryIds"]:not(#select-all)');

                // Check if at least one checkbox is checked
                const isAnyChecked = Array.from(checkboxes).some(checkbox => checkbox.checked);

                // Select the delete button using its class or ID
                const deleteButton = document.querySelector('.btn-danger[data-bs-target="#deleteModal"]');
                const approveButton = document.querySelector('.btn-success[data-bs-target="#approveModal"]');
                const denyButton = document.querySelector('.btn-danger[data-bs-target="#denyModal"]');

                // Enable or disable the delete button based on if any checkboxes are checked
                deleteButton.disabled = !isAnyChecked;
                approveButton.disabled = !isAnyChecked;
                denyButton.disabled = !isAnyChecked;
            }

        document.addEventListener('DOMContentLoaded', function () {
            // When the DOM is fully loaded, initialize the delete button state
            updateDeleteButtonState();

            // Listen for changes on each checkbox
            document.querySelectorAll('.form-check-input').forEach(function (checkbox) {
                checkbox.addEventListener('change', function () {
                    // Update the delete button state whenever a checkbox changes
                    updateDeleteButtonState();
                });
            });

            // Optional: If you have a 'Select All' checkbox, you can update all checkboxes and the delete button state on its change
            const selectAllCheckbox = document.getElementById('select-all');
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', function (event) {
                    const checkboxes = document.querySelectorAll('.table .form-check-input');
                    const isChecked = event.target.checked;

                    checkboxes.forEach(function (checkbox) {
                        checkbox.checked = isChecked;
                    });

                    // Update the delete button state after changing all checkboxes
                    updateDeleteButtonState();
                });
            }
        });

        function setActionType(actionType) {
            // Set the value of the hidden input before submitting the form
            document.getElementById('actionTypeInput').value = actionType;
        }
    </script>
}
else if (User.IsInRole("student"))
{
    <script>
        // This function updates the delete button's disabled state based on the checkboxes
        function updateDeleteButtonState() {
            // Find all checkboxes with name='timeEntryIds' except the 'select-all' checkbox
            const checkboxes = document.querySelectorAll('input[name="timeEntryIds"]:not(#select-all)');

            // Check if at least one checkbox is checked
            const isAnyChecked = Array.from(checkboxes).some(checkbox => checkbox.checked);

            // Select the delete button using its class or ID
            const deleteButton = document.querySelector('.btn-danger[data-bs-target="#deleteModal"]');

            // Enable or disable the delete button based on if any checkboxes are checked
            deleteButton.disabled = !isAnyChecked;
        }

        document.addEventListener('DOMContentLoaded', function () {
            // When the DOM is fully loaded, initialize the delete button state
            updateDeleteButtonState();

            // Listen for changes on each checkbox
            document.querySelectorAll('.form-check-input').forEach(function (checkbox) {
                checkbox.addEventListener('change', function () {
                    // Update the delete button state whenever a checkbox changes
                    updateDeleteButtonState();
                });
            });

            // Optional: If you have a 'Select All' checkbox, you can update all checkboxes and the delete button state on its change
            const selectAllCheckbox = document.getElementById('select-all');
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', function (event) {
                    const checkboxes = document.querySelectorAll('.table .form-check-input');
                    const isChecked = event.target.checked;

                    checkboxes.forEach(function (checkbox) {
                        checkbox.checked = isChecked;
                    });

                    // Update the delete button state after changing all checkboxes
                    updateDeleteButtonState();
                });
            }
        });

        function setActionType(actionType) {
            // Set the value of the hidden input before submitting the form
            document.getElementById('actionTypeInput').value = actionType;
        }
    </script>
}
else if (User.IsInRole("employer"))
{
    <script>
        // This function updates the delete button's disabled state based on the checkboxes
        function updateDeleteButtonState() {
            // Find all checkboxes with name='timeEntryIds' except the 'select-all' checkbox
            const checkboxes = document.querySelectorAll('input[name="timeEntryIds"]:not(#select-all)');

            // Check if at least one checkbox is checked
            const isAnyChecked = Array.from(checkboxes).some(checkbox => checkbox.checked);

            // Select the delete button using its class or ID
            const approveButton = document.querySelector('.btn-success[data-bs-target="#approveModal"]');
            const denyButton = document.querySelector('.btn-danger[data-bs-target="#denyModal"]');

            // Enable or disable the delete button based on if any checkboxes are checked
            approveButton.disabled = !isAnyChecked;
            denyButton.disabled = !isAnyChecked;
        }

        document.addEventListener('DOMContentLoaded', function () {
            // When the DOM is fully loaded, initialize the delete button state
            updateDeleteButtonState();

            // Listen for changes on each checkbox
            document.querySelectorAll('.form-check-input').forEach(function (checkbox) {
                checkbox.addEventListener('change', function () {
                    // Update the delete button state whenever a checkbox changes
                    updateDeleteButtonState();
                });
            });

            // Optional: If you have a 'Select All' checkbox, you can update all checkboxes and the delete button state on its change
            const selectAllCheckbox = document.getElementById('select-all');
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', function (event) {
                    const checkboxes = document.querySelectorAll('.table .form-check-input');
                    const isChecked = event.target.checked;

                    checkboxes.forEach(function (checkbox) {
                        checkbox.checked = isChecked;
                    });

                    // Update the delete button state after changing all checkboxes
                    updateDeleteButtonState();
                });
            }
        });

        function setActionType(actionType) {
            // Set the value of the hidden input before submitting the form
            document.getElementById('actionTypeInput').value = actionType;
        }
    </script>
}